// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MZUIKitExtension
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import MZSwifts
@_exported import MZUIKitExtension
import PhotosUI
import StoreKit
import Swift
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class MZUIControl {
  @objc deinit
}
extension MZUIKitExtension.MZUIControl {
  public class KeyboardEvents : MZUIKitExtension.MZUIControlKeyboardEventsProtocol {
    public var _observers: [any ObjectiveC.NSObjectProtocol]
    public var willShowAction: ((Foundation.Notification) -> ())?
    public var willHideAction: ((Foundation.Notification) -> ())?
    public init()
    public func KeyboardWillShow(notification: Foundation.Notification)
    public func KeyboardWillHide(notification: Foundation.Notification)
    @objc deinit
  }
}
extension MZUIKitExtension.MZUIControl {
  public class TapToDismissKeyboard : MZUIKitExtension.MZUIControlKeyboardEventsProtocol {
    public var _observers: [any ObjectiveC.NSObjectProtocol]
    public init()
    public func KeyboardWillShow(notification: Foundation.Notification)
    public func KeyboardWillHide(notification: Foundation.Notification)
    public func addControl(to _view: UIKit.UIView)
    public func addOtherResponder(_ responder: UIKit.UIResponder)
    public func removeControl()
    @objc deinit
  }
}
extension MZUIKitExtension.MZUIControl {
  public class ShiftViewForKeyboardShow : MZUIKitExtension.MZUIControlKeyboardEventsProtocol {
    public var _observers: [any ObjectiveC.NSObjectProtocol]
    public var forceShiftTo: UIKit.UIView?
    public var adjustShiftFunc: (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
    public init()
    public func addInputViews(_ inputViews: [UIKit.UIView])
    public func removeInputViews()
    public func setInputViews(_ inputViews: [UIKit.UIView])
    public func setAtViewDidAppear(view: UIKit.UIView)
    public func KeyboardWillShow(notification: Foundation.Notification)
    public func KeyboardWillHide(notification: Foundation.Notification)
    @objc deinit
  }
}
public protocol MZUIControlKeyboardEventsProtocol {
  var _observers: [any ObjectiveC.NSObjectProtocol] { get set }
  func KeyboardWillShow(notification: Foundation.Notification)
  func KeyboardWillHide(notification: Foundation.Notification)
  mutating func enable()
  mutating func disable()
}
extension MZUIKitExtension.MZUIControlKeyboardEventsProtocol {
  public mutating func enable()
  public mutating func disable()
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public var contentClippingRect: CoreFoundation.CGRect {
    get
  }
}
public protocol MZTouchNotifierProtocol : AnyObject {
  func addTouchResponder(touchResponder: any MZUIKitExtension.MZTouchResponderProtocol)
  func removeTouchResponder(touchResponder: any MZUIKitExtension.MZTouchResponderProtocol)
  func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  func positionWithTouch(touch: UIKit.UITouch) -> CoreFoundation.CGPoint
}
public protocol MZTouchResponderProtocol : AnyObject {
  var touchNotifier: (any MZUIKitExtension.MZTouchNotifierProtocol)! { get set }
  func touchesBegan(touches: Swift.Set<UIKit.UITouch>)
  func touchesMoved(touches: Swift.Set<UIKit.UITouch>)
  func touchesEnded(touches: Swift.Set<UIKit.UITouch>)
  func removeFromNotifier()
}
public enum MZTouchType : Swift.Int {
  case began
  case moved
  case ended
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension MZUIKitExtension.MZTouchType : Swift.CaseIterable {
  public typealias AllCases = [MZUIKitExtension.MZTouchType]
  public static var allCases: [MZUIKitExtension.MZTouchType] {
    get
  }
}
extension MZUIKitExtension.MZTouchType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIImage {
  public enum Format {
    case png
    case jpg(compressionQuality: CoreFoundation.CGFloat)
  }
  public func data(as format: UIKit.UIImage.Format = .png, needAutoreleasepool: Swift.Bool = false) -> Foundation.Data?
  public func normalized() -> UIKit.UIImage
  public func resized(to targetSize: CoreFoundation.CGSize, scale: CoreFoundation.CGFloat = UIScreen.main.scale, opaque: Swift.Bool = true) -> UIKit.UIImage
  public func resized(maxEdge: CoreFoundation.CGFloat, forceResizeIfLess: Swift.Bool = false, scale: CoreFoundation.CGFloat = UIScreen.main.scale, opaque: Swift.Bool = true) -> UIKit.UIImage
  public func cropped(to cropRect: CoreFoundation.CGRect) -> UIKit.UIImage?
  public func rotating(to orientation: UIKit.UIImage.Orientation) -> UIKit.UIImage?
}
@_hasMissingDesignatedInitializers public class MZImage {
  public struct DataInfo {
  }
  @objc deinit
}
@objc public class MZInAppPurchaseManger : ObjectiveC.NSObject {
  public var canMakePayments: Swift.Bool {
    get
  }
  public var productIdentifiers: Swift.Set<Swift.String> {
    get
  }
  public var products: [StoreKit.SKProduct] {
    get
  }
  public init(productIdentifiers: Swift.Set<Swift.String>)
  public func requestProducts(handler: (([StoreKit.SKProduct]?, (any Swift.Error)?) -> ())?)
  public func sendPayment(with product: StoreKit.SKProduct, success: ((Swift.String) -> ())? = nil, fail: ((Swift.String) -> ())? = nil)
  public func sendRestoreRequest(handler: (([Swift.String]?, (any Swift.Error)?) -> ())? = nil)
  @objc deinit
}
extension MZUIKitExtension.MZInAppPurchaseManger : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: any Swift.Error)
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
}
extension MZUIKitExtension.MZInAppPurchaseManger : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
  @objc dynamic public func paymentQueueRestoreCompletedTransactionsFinished(_ queue: StoreKit.SKPaymentQueue)
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: any Swift.Error)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func addAccessoryBarWithDoneButton(title: Swift.String = "Done", endEditingFor view: UIKit.UIView, textColor: UIKit.UIColor? = nil, barColor: UIKit.UIColor? = .white, barHeight: CoreFoundation.CGFloat = 44)
}
extension MZUIKitExtension.MZUIs {
  public static var defaultLocaleIDIfNotFoundInCurrent: Swift.String {
    get
    set
  }
  public class func keyLocalized(of key: Swift.String, comment: Swift.String = "", defaultLocaleID: Swift.String? = MZUIs.defaultLocaleIDIfNotFoundInCurrent) -> Swift.String?
  public class func keyLocalized(to views: [UIKit.UIView]?, setting: ((UIKit.UIView) -> ())? = nil)
}
extension Swift.String {
  public func keyLocalized(comment: Swift.String = "", defaultLocaleID: Swift.String? = MZUIs.defaultLocaleIDIfNotFoundInCurrent) -> Swift.String?
}
@_hasMissingDesignatedInitializers public class MZInputUtility {
  public static func editingNumberText(of text: Swift.String?) -> Swift.String?
  public static func numberText(of text: Swift.String?, range: Swift.Range<Swift.Double>? = nil, unit: Swift.String) -> Swift.String?
  @objc deinit
}
extension MZUIKitExtension.MZInputUtility {
  public class func AsAmount(unit: Swift.String = "g") -> MZUIKitExtension.MZInputUtility.AsNumber
  public class func AsTempture() -> MZUIKitExtension.MZInputUtility.AsNumber
  @objc public class AsNumber : ObjectiveC.NSObject {
    required public init(unit: Swift.String, range: Swift.Range<Swift.Double>? = nil)
    public func apply(to textFileds: [UIKit.UITextField])
    @objc deinit
  }
}
extension MZUIKitExtension.MZInputUtility {
  @objc public class TextInputToolBar : ObjectiveC.NSObject {
    public init?(setTo textInputs: [UIKit.UIView], tintColor: UIKit.UIColor? = nil)
    @objc deinit
  }
}
extension MZUIKitExtension.MZInputUtility {
  @objc public class TextFieldMaxLength : ObjectiveC.NSObject {
    public init?(setTo textFields: [UIKit.UITextField], maxLength: Swift.Int)
    @objc deinit
  }
}
extension MZUIKitExtension.MZInputUtility {
  @objc @_Concurrency.MainActor(unsafe) public class TextViewControl : ObjectiveC.NSObject, UIKit.UITextViewDelegate {
    @_Concurrency.MainActor(unsafe) public init(textView: UIKit.UITextView, maxLength: Swift.Int? = nil, placeholder: Swift.String? = nil)
    @objc deinit
    @_Concurrency.MainActor(unsafe) public func update()
    @_Concurrency.MainActor(unsafe) @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  }
}
@_hasMissingDesignatedInitializers public class MZUIs {
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isShown: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func set(anchorPoint: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) public func addCircleMask()
  @_Concurrency.MainActor(unsafe) public func drawBorder(color: UIKit.UIColor = UIColor.green, width: CoreFoundation.CGFloat = 2)
  @_Concurrency.MainActor(unsafe) public func copyView<T>() -> T where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func snapshotImage(size: CoreFoundation.CGSize? = nil, dpi: Swift.Int = 72, opaque: Swift.Bool = true, usingCopyView: Swift.Bool = false) -> UIKit.UIImage?
}
extension UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public func setAction(_ action: UIKit.UIAction, for event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func setAction(for event: UIKit.UIControl.Event, action: @escaping ((UIKit.UIAction) -> ()))
  @_Concurrency.MainActor(unsafe) public func addAction(for event: UIKit.UIControl.Event, action: @escaping ((UIKit.UIAction) -> ()))
  @_Concurrency.MainActor(unsafe) public func removeAllActions()
  @_Concurrency.MainActor(unsafe) public func removeAction(for event: UIKit.UIControl.Event)
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class MZMediaLibraryPickerX : ObjectiveC.NSObject {
  public enum SourceType {
    case photoLibrary
    case camera
    public static func == (a: MZUIKitExtension.MZMediaLibraryPickerX.SourceType, b: MZUIKitExtension.MZMediaLibraryPickerX.SourceType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(iOS 13.0, *)
  public func show(in parent: UIKit.UIViewController, sourceType: MZUIKitExtension.MZMediaLibraryPickerX.SourceType, modalPresentationStyle style: UIKit.UIModalPresentationStyle = .fullScreen, completed: (() -> ())? = nil, done: ((UIKit.UIImage?) -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
extension MZUIKitExtension.MZMediaLibraryPickerX : PhotosUI.PHPickerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension MZUIKitExtension.MZMediaLibraryPickerX : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension MZUIKitExtension.MZUIs {
  public class func topViewController() -> UIKit.UIViewController?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public class func topViewController() -> UIKit.UIViewController?
}
extension Swift.String {
  public func localizing(comment: Swift.String = "") -> Swift.String
}
@propertyWrapper public struct UserDefaultsStoredUIColor {
  public init(key: Swift.String, default: UIKit.UIColor?)
  public var wrappedValue: UIKit.UIColor? {
    get
    set
  }
}
extension MZUIKitExtension.UserDefaultsStoredUIColor {
  public static func color(forKey key: Swift.String, default: UIKit.UIColor?) -> UIKit.UIColor?
  public static func setColor(_ color: UIKit.UIColor?, forKey key: Swift.String)
}
extension MZUIKitExtension.MZUIs {
  @_hasMissingDesignatedInitializers public class AlertController {
    public static var actionTitleFunc: ((Swift.String) -> Swift.String)?
    @discardableResult
    public class func show(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, actionSheetPadStyle: UIKit.UIAlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
    @discardableResult
    public class func showWithCancel(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, cancelTitle: Swift.String = "Cancel", cancelAction: ((UIKit.UIAlertAction) -> ())? = nil, actionSheetPadStyle: UIKit.UIAlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
    @objc deinit
  }
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, actionSheetPadStyle: UIKit.UIAlertController.ActionSheetPadStyle = .default)
}
extension UIKit.UIAlertController {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func show(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, actionSheetPadStyle: UIKit.UIAlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
  @discardableResult
  @_Concurrency.MainActor(unsafe) public class func showWithCancel(title: Swift.String? = nil, message: Swift.String? = nil, needLocalize: Swift.Bool = false, style: UIKit.UIAlertController.Style, actions: [UIKit.UIAlertAction]? = nil, in viewController: UIKit.UIViewController? = nil, cancelTitle: Swift.String = "Cancel", cancelAction: ((UIKit.UIAlertAction) -> ())? = nil, actionSheetPadStyle: UIKit.UIAlertController.ActionSheetPadStyle = .default) -> UIKit.UIAlertController
  @discardableResult
  @_Concurrency.MainActor(unsafe) public static func popover(title: Swift.String? = nil, message: Swift.String? = nil, in owner: UIKit.UIViewController, okTitle: Swift.String = "Ok", okAction: (() -> ())? = nil) -> UIKit.UIAlertController
}
extension UIKit.UIAlertController {
  public enum ActionSheetPadStyle {
    case `default`
    case barButtonItem(UIKit.UIBarButtonItem)
    case customFrame(CoreFoundation.CGRect)
  }
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor(unsafe) public func removeShadow()
}
@objc @_inheritsConvenienceInitializers public class MZMediaLibraryPicker : ObjectiveC.NSObject {
  @available(iOS 13.0, *)
  public func show(in parent: UIKit.UIViewController, sourceType: UIKit.UIImagePickerController.SourceType, modalPresentationStyle: UIKit.UIModalPresentationStyle = .automatic, completed: (() -> ())? = nil, done: ((UIKit.UIImage?) -> ())?)
  public func show(in parent: UIKit.UIViewController, sourceType: UIKit.UIImagePickerController.SourceType, completed: (() -> ())? = nil, done: ((UIKit.UIImage?) -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
extension MZUIKitExtension.MZMediaLibraryPicker : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
public class MZUIPresentViewOnTopWithMask {
  public var enableTapMaskToHide: Swift.Bool
  public var onHidingAction: (() -> ())?
  public init()
  public func show(presentFor presentView: UIKit.UIView? = nil, on parentView: UIKit.UIView, beforePresenting: ((UIKit.UIView) -> ())? = nil)
  public func hide(forPresented _view: UIKit.UIView? = nil, animating: Swift.Bool = true)
  @objc deinit
}
extension MZUIKitExtension.MZTouchType : Swift.Equatable {}
extension MZUIKitExtension.MZTouchType : Swift.Hashable {}
extension MZUIKitExtension.MZTouchType : Swift.RawRepresentable {}
extension MZUIKitExtension.MZMediaLibraryPickerX.SourceType : Swift.Equatable {}
extension MZUIKitExtension.MZMediaLibraryPickerX.SourceType : Swift.Hashable {}
